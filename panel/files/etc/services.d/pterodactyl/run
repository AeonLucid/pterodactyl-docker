#!/usr/bin/with-contenv bash

cd /var/www/pterodactyl || exit

# Create the storage/cache directories
if [ ! -d /data/storage ]; then
    mkdir -p /data/storage
    cat .storage.tmpl | while read line; do
        mkdir -p "/data/${line}"
    done
    chown -R abc:abc /data/storage
fi

if [ ! -d /data/cache ]; then
    mkdir -p /data/cache
    chown -R abc:abc /data/cache
fi

# Initial setup
if [ ! -e /data/pterodactyl.conf ]; then
    echo "Running first time setup..."

    # Generate base template
    touch /data/pterodactyl.conf
    echo "##" > /data/pterodactyl.conf
    echo "# Generated on:" $(date +"%B %d %Y, %H:%M:%S") >> /data/pterodactyl.conf
    echo "# This file was generated on first start and contains " >> /data/pterodactyl.conf
    echo "# the key for sensitive information. All panel configuration " >> /data/pterodactyl.conf
    echo "# can be done here using the normal method." >> /data/pterodactyl.conf
    echo "##" >> /data/pterodactyl.conf
    echo "" >> /data/pterodactyl.conf
    echo "APP_KEY=SomeRandomString3232RandomString" >> /data/pterodactyl.conf

    # Refresh symlink.
    rm -rf .env
    ln -s /data/pterodactyl.conf .env

    echo ""
    echo "Generating key..."
    php artisan key:generate --force --no-interaction

    echo ""
    echo "Creating & seeding database..."
    php artisan migrate --force
    php artisan db:seed --force
fi

echo "Starting Pterodactyl ${VERSION}..."

# Copy nginx config.
cat /etc/nginx/templates/http.conf > /etc/nginx/conf.d/default.conf

# Refresh symlinks (or files) and recreate them
rm -rf storage
ln -s /data/storage storage

rm -rf bootstrap/cache
ln -s /data/cache bootstrap/cache

rm -rf .env
ln -s /data/pterodactyl.conf .env

# Run
exec s6-setuidgid abc nginx â€“g "daemon off;"
